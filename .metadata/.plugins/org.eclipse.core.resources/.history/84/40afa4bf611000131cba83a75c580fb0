package com.jemcphe.xcell.db;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.jemcphe.xcell.items.Accessory;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class AccessoriesDataSource {

	private static final String LOGTAG = "XCELL";

	
	SQLiteOpenHelper dbHelper;
	SQLiteDatabase dataBase;
	
	private static final String[] allColumns = {
		AccessoryDBOpenHelper.COLUMN_ID,
		AccessoryDBOpenHelper.COLUMN_DATE,
		AccessoryDBOpenHelper.COLUMN_ACCESSORY,
		AccessoryDBOpenHelper.COLUMN_QTY,
		AccessoryDBOpenHelper.COLUMN_TOTAL
	};
	
	private static final String[] totalColumn = {
		AccessoryDBOpenHelper.COLUMN_TOTAL
	};
	
	public AccessoriesDataSource (Context context){
		
		//SQLite setup
        dbHelper = new AccessoryDBOpenHelper(context);
		
	}
	
	public void open () throws SQLException{
		Log.i(LOGTAG, "Database Opened");
		dataBase = dbHelper.getWritableDatabase();
	}
	
	public void close () {
		Log.i(LOGTAG, "Database Closed");
		dbHelper.close();
	}
	
	public Accessory createAccessory(String date, String accessoryName, String qty, String total){
		
		ContentValues values = new ContentValues();
		values.put(AccessoryDBOpenHelper.COLUMN_DATE, date);
		values.put(AccessoryDBOpenHelper.COLUMN_ACCESSORY, accessoryName);
		values.put(AccessoryDBOpenHelper.COLUMN_QTY, qty);
		values.put(AccessoryDBOpenHelper.COLUMN_TOTAL, total);
		long insertId = dataBase.insert(AccessoryDBOpenHelper.TABLE_ACCESSORIES, null, values);
		
		Cursor cursor = dataBase.query(AccessoryDBOpenHelper.TABLE_ACCESSORIES, allColumns, AccessoryDBOpenHelper.COLUMN_ID + " = " + insertId, null, null, null, null);
		cursor.moveToFirst();
		
		Accessory newAccessory = cursorToAccessory(cursor);
		cursor.close();
		return newAccessory;
		
	}
	
	private Accessory cursorToAccessory(Cursor cursor){
		Accessory accessory = new Accessory();
		accessory.setId(cursor.getLong(0));
		accessory.setDate(cursor.getString(1));
		accessory.setAccessoryName(cursor.getString(2));
		accessory.setQty(cursor.getString(3));
		accessory.setTotal(cursor.getString(4));
		
		return accessory;
	}
	
	private Accessory cursorToAccessoryTotal(Cursor cursor){
		Accessory accessory = new Accessory();
		accessory.setTotal(cursor.getString(4));
		
		return accessory;
	}
	
	public List<Accessory> findAll(){
		
		//dataBase = dbHelper.getReadableDatabase();
		
		List<Accessory> accessories = new ArrayList<Accessory>();
		
		Cursor cursor = dataBase.query(AccessoryDBOpenHelper.TABLE_ACCESSORIES, allColumns, null, null, null, null, null);
		Log.i(LOGTAG, "Returned " + cursor.getCount() + " rows"	);
		
		//Loop through accessories
		if(cursor.getCount() > 0){
			cursor.moveToFirst();
			while (!cursor.isAfterLast()){
				Accessory accessory = cursorToAccessory(cursor);
				accessories.add(accessory);
				cursor.moveToNext();
				
				Log.i(LOGTAG, accessories.toString());
			}
		}
		cursor.close();
		return accessories;
	}
	
	public List<Accessory> accessoryTotals(){

		List<Accessory> totals = new ArrayList<Accessory>();
		
		Cursor cursor = dataBase.query(AccessoryDBOpenHelper.TABLE_ACCESSORIES,
				allColumns, null, null, null, null, null);

		//Loop through accessories
		if(cursor.getCount() > 0){
			cursor.moveToFirst();
			while (!cursor.isAfterLast()){
				Accessory total = cursorToAccessoryTotal(cursor);
				totals.add(total);
				cursor.moveToNext();

				Log.i(LOGTAG + "Totals", totals.toString());
			}
		}
		cursor.close();
		return totals;
	}
}
